import google.generativeai as genai
from telegram import Update, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import Application, CommandHandler, MessageHandler, InlineQueryHandler, filters, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∫–ª—é—á–µ–π (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ò –ò–õ–ò –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø)
TELEGRAM_TOKEN = "7768573149:AAGz39ynjIe51BqsQ313yqZ8rIswmeu2DCw"
GEMINI_API_KEY = "AIzaSyATgxkicZ7--4_udTHPzJjkeRM6u0PP3AA"
MAX_MESSAGE_LENGTH = 4096

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-2.0-flash')

async def split_text(text: str, max_len: int) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ max_len —Å–∏–º–≤–æ–ª–æ–≤"""
    return [text[i:i+max_len] for i in range(0, len(text), max_len)]

async def send_long_message(update: Update, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Å—Ç—è–º–∏"""
    chunks = await split_text(text, MAX_MESSAGE_LENGTH)
    for chunk in chunks:
        await update.message.reply_text(chunk)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç {user.first_name}! –Ø –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º Gemini.\n"
        "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å!\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ –≤ –ª—é–±–æ–º —á–∞—Ç–µ, "
        "–Ω–∞–ø–∏—Å–∞–≤ @{context.bot.username} –∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_message = update.message.text
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Gemini
        response = model.generate_content(user_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ
        if not response.text:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        if len(response.text) > MAX_MESSAGE_LENGTH:
            await send_long_message(update, response.text)
        else:
            await update.message.reply_text(response.text)
        
    except Exception as e:
        error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
        print(error_message)
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.inline_query.query
    if not query:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –ø—É—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ
        await update.inline_query.answer([
            InlineQueryResultArticle(
                id="help",
                title="–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
                input_message_content=InputTextMessageContent(
                    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ @username_–±–æ—Ç–∞\n"
                    "–ü—Ä–∏–º–µ—Ä: @MyGeminiBot –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ò–ò?"
                ),
                description="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ @–∏–º—è_–±–æ—Ç–∞"
            )
        ])
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Gemini
        response = model.generate_content(query)
        content = response.text[:500]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª—è –ø—Ä–µ–≤—å—é
        
        results = [
            InlineQueryResultArticle(
                id=str(update.inline_query.id),
                title=f"–û—Ç–≤–µ—Ç –Ω–∞: {query[:30]}...",
                input_message_content=InputTextMessageContent(
                    f"üîç –ó–∞–ø—Ä–æ—Å: {query}\n\n"
                    f"üí° –û—Ç–≤–µ—Ç:\n{response.text}"
                ),
                description=content[:100],
                thumb_url="https://i.ibb.co/7QF7kYh/gemini-icon.png"
            )
        ]
        
        await update.inline_query.answer(results, cache_time=10)
        
    except Exception as e:
        error_result = [
            InlineQueryResultArticle(
                id="error",
                title="–û—à–∏–±–∫–∞",
                input_message_content=InputTextMessageContent(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
                ),
                thumb_url="https://i.ibb.co/7W2c4sT/error-icon.png"
            )
        ]
        await update.inline_query.answer(error_result)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–æ–º"""
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(InlineQueryHandler(inline_query))  # –ò–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()